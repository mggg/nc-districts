{"version":3,"sources":["logo.svg","layers/Layer.js","pages/Grid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layer","map","layer","adder","this","id","sourceId","source","type","sourceLayer","addLayer","getFeature","bind","removeLayer","opacity","isText","setPaintProperty","replace","color","getPaintProperty","properties","name","featureId","state","setFeatureState","value","getFeatureState","querySourceFeatures","filter","queryRenderedFeatures","layers","feature","part","args","on","off","callback","isSourceLoaded","handler","window","mapboxgl","accessToken","city_configs","center","zoom","Grid","props","mapLoaded","showBorder","federal","house","senate","maps","fetch","then","res","json","gj","state_house","state_senate","forEach","city","i","Map","container","refs","style","attributionControl","pitchWithRotate","dragPan","touchZoomRotate","addControl","NavigationControl","addSource","data","push","paint","url","layer_id","layerName","lyr","setOpacity","setState","className","checked","onChange","e","ref","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6ed0436.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// The addBelowLabels method gives the right look on the Mapbox \"streets\" basemap,\r\n// while addBelowSymbols gives the right look on the \"light\" basemap.\r\n\r\n/**\r\n * Add the layer to the map below the first label layer (e.g. street names).\r\n * @param {mapboxgl.Map} map\r\n * @param {Layer} layer\r\n */\r\nexport function addBelowLabels(map, layer) {\r\n    const layers = map.getStyle().layers;\r\n    const firstSymbolId = getFirstLabelId(layers);\r\n    map.addLayer(layer, firstSymbolId);\r\n}\r\n\r\nexport function addBelowSymbols(map, layer) {\r\n    const layers = map.getStyle().layers;\r\n    const firstSymbolId = getFirstSymbolId(layers);\r\n    map.addLayer(layer, firstSymbolId);\r\n}\r\n\r\n/**\r\n * @param {Object[]} layers list of layers from the Mapbox map's style\r\n * @returns {string} id of the first id with \"label\" in the name\r\n */\r\nfunction getFirstLabelId(layers) {\r\n    for (let i = 0; i < layers.length; i++) {\r\n        if (layers[i].id.includes(\"label\")) {\r\n            return layers[i].id;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getFirstSymbolId(layers) {\r\n    for (let i = 0; i < layers.length; i++) {\r\n        if (layers[i].type === \"symbol\") {\r\n            return layers[i].id;\r\n        }\r\n    }\r\n}\r\n\r\n/** A layer on a Mapbox map. */\r\nexport default class Layer {\r\n    /**\r\n     * @param {mapboxgl.Map} map to add the layer to\r\n     * @param {Object} layer a Layer object obeying the Mapbox style specification\r\n     * @param {function} [adder] a function (map, layer) -> void that adds the layer\r\n     *  to the map.\r\n     */\r\n    constructor(map, layer, adder) {\r\n        this.map = map;\r\n        this.layer = layer;\r\n        this.id = layer.id;\r\n        this.sourceId = layer.source;\r\n        this.type = layer.type;\r\n        this.sourceLayer = layer[\"source-layer\"];\r\n\r\n        if (adder) {\r\n            adder(map, layer);\r\n        } else if (map) {\r\n            map.addLayer(layer);\r\n        }\r\n\r\n        this.getFeature = this.getFeature.bind(this);\r\n    }\r\n    addToMap(map) {\r\n      if (map && !this.map) {\r\n        this.map = map;\r\n        map.addLayer(this.layer);\r\n      }\r\n    }\r\n    remove() {\r\n      if (this.map) {\r\n        this.map.removeLayer(this.id);\r\n        this.map = null;\r\n      }\r\n    }\r\n    setOpacity(opacity, isText) {\r\n        this.setPaintProperty(`${isText ? \"text\" : this.type.replace(\"symbol\", \"icon\")}-opacity`, opacity);\r\n    }\r\n    setColor(color) {\r\n        this.setPaintProperty(`${this.type}-color`, color);\r\n    }\r\n    getColor() {\r\n        return this.getPaintProperty(`${this.type}-color`);\r\n    }\r\n    setPaintProperties(properties) {\r\n        for (let name in properties) {\r\n            this.setPaintProperty(name, properties[name]);\r\n        }\r\n    }\r\n    setFeatureState(featureId, state) {\r\n        this.map.setFeatureState(\r\n            {\r\n                source: this.sourceId,\r\n                sourceLayer: this.sourceLayer,\r\n                id: featureId\r\n            },\r\n            state\r\n        );\r\n    }\r\n    setPaintProperty(name, value) {\r\n        this.map.setPaintProperty(this.id, name, value);\r\n    }\r\n    getPaintProperty(name) {\r\n        return this.map.getPaintProperty(this.id, name);\r\n    }\r\n    getFeatureState(featureId) {\r\n        return this.map.getFeatureState({\r\n            source: this.sourceId,\r\n            sourceLayer: this.sourceLayer,\r\n            id: featureId\r\n        });\r\n    }\r\n    getFeature(featureId) {\r\n        const features = this.map.querySourceFeatures(this.sourceId, {\r\n            sourceLayer: this.sourceLayer,\r\n            filter: [\"==\", [\"id\"], featureId]\r\n        });\r\n        return features[0];\r\n    }\r\n    queryRenderedFeatures() {\r\n        return this.map.queryRenderedFeatures(null, { layers: [this.id] });\r\n    }\r\n    querySourceFeatures() {\r\n        return this.map.querySourceFeatures(this.sourceId, {\r\n            sourceLayer: this.sourceLayer\r\n        });\r\n    }\r\n    getAssignment(featureId) {\r\n        return this.getFeatureState(featureId).color;\r\n    }\r\n    setAssignment(feature, part) {\r\n        this.setFeatureState(feature.id, {\r\n            ...feature.state,\r\n            color: part\r\n        });\r\n    }\r\n    on(type, ...args) {\r\n        this.map.on(type, this.id, ...args);\r\n    }\r\n    off(type, ...args) {\r\n        this.map.off(type, this.id, ...args);\r\n    }\r\n    untilSourceLoaded(callback) {\r\n        if (this.map.isSourceLoaded(this.sourceId)) {\r\n            return callback();\r\n        }\r\n        const handler = () =>\r\n            callback(() => this.map.off(\"sourcedata\", handler));\r\n        this.map.on(\"sourcedata\", handler);\r\n    }\r\n}\r\n","import React from 'react'\n\n// map management\nimport Layer from '../layers/Layer'\n// import { HoverWithRadius } from '../layers/Hover'\n\nwindow.mapboxgl.accessToken = \"pk.eyJ1IjoiZGlzdHJpY3RyIiwiYSI6ImNqbjUzMTE5ZTBmcXgzcG81ZHBwMnFsOXYifQ.8HRRLKHEJA0AismGk2SX2g\";\n\nconst city_configs = [\n  {\n    name: \"Charlotte\",\n    center: [-80.9073009, 35.2119091],\n    zoom: 9\n  },\n  {\n    name: \"Raleigh\",\n    center: [-78.6902118, 35.8221152],\n    zoom: 9\n  },\n\n  {\n    name: \"Greensboro\",\n    center: [-79.8936405, 36.0808962],\n    zoom: 9\n  },\n  {\n    name: \"Durham\",\n    center: [-78.9644001, 35.9893843],\n    zoom: 9\n  },\n  {\n    name: \"Winston-Salem\",\n    center: [-80.322947, 36.1079573],\n    zoom: 9\n  },\n  {\n    name: \"Fayetteville\",\n    center: [-79.0080239, 35.0717055],\n    zoom: 9\n  },\n  {\n    name: \"Cary\",\n    center: [-78.8826751, 35.7693799],\n    zoom: 9.5\n  },\n  {\n    name: \"Wilmington\",\n    center: [-77.9131854, 34.2130073],\n    zoom: 9.5\n  },\n  {\n    name: \"High Point\",\n    center: [-80.0280459, 35.9723156],\n    zoom: 9.5\n  },\n]\n\nexport default class Grid extends React.Component {\n  constructor (props) {\n    super()\n\n    this.state = {\n      mapLoaded: false,\n      layer: \"federal\"\n    }\n    this.showBorder = this.showBorder.bind(this)\n    this.layers = {\n      federal: [],\n      house: [],\n      senate: []\n    }\n  }\n\n  componentDidMount() {\n    this.maps = []\n\n    fetch(\"/nc-districts/nc-geo/current_districts.geojson\").then(res => res.json()).then((gj) => {\n    fetch(\"/nc-districts/nc-geo/state_house_districts.geojson\").then(res => res.json()).then((state_house) => {\n    fetch(\"/nc-districts/nc-geo/state_senate_districts.geojson\").then(res => res.json()).then((state_senate) => {\n\n      city_configs.forEach((city, i) => {\n        let map = new window.mapboxgl.Map({\n          container: this.refs[\"map\" + i],\n          style: 'mapbox://styles/mapbox/light-v10',\n          center: city.center,\n          zoom: city.zoom,\n          attributionControl: false,\n          pitchWithRotate: false,\n          // preserveDrawingBuffer: true,\n          dragPan: true,\n          touchZoomRotate: true,\n        })\n\n        map.on('load', () => {\n          map.addControl(new window.mapboxgl.NavigationControl())\n\n          map.addSource('districts', {\n            type: \"geojson\",\n            data: gj\n          })\n          this.layers.federal.push(new Layer(map, {\n            id: 'districts',\n            source: 'districts',\n            type: 'line',\n            paint: {\n              'line-color': '#555',\n              'line-width': 1.5\n            }\n          }))\n\n          map.addSource('state_senate', {\n            type: \"geojson\",\n            data: state_senate\n          })\n          this.layers.senate.push(new Layer(map, {\n            id: 'state_senate',\n            source: 'state_senate',\n            type: 'line',\n            paint: {\n              'line-color': '#555',\n              'line-width': 1.5,\n              'line-opacity': 0\n            }\n          }))\n\n          map.addSource('state_house', {\n            type: \"geojson\",\n            data: state_house\n          })\n          this.layers.house.push(new Layer(map, {\n            id: 'state_house',\n            source: 'state_house',\n            type: 'line',\n            paint: {\n              'line-color': '#555',\n              'line-width': 1.5,\n              'line-opacity': 0\n            }\n          }))\n\n          // NC precincts\n          map.addSource('precincts', {\n            type: \"vector\",\n            url: \"mapbox://districtr.nc_precincts\"\n          })\n          let borderPrecincts = new Layer(map, {\n            id: 'precincts-borders',\n            source: 'precincts',\n            'source-layer': 'nc_precincts',\n            type: 'line',\n            paint: {\n              \"line-color\": \"#777777\",\n              \"line-width\": [\"interpolate\", [\"linear\"], [\"zoom\"], 0, 0, 7, 1],\n              \"line-opacity\": 0.3\n            }\n          })\n          // let fillPrecincts = new Layer(null, { // don't add to map right now\n          //   id: 'precincts',\n          //   source: 'precincts',\n          //   'source-layer': 'nc_precincts',\n          //   type: 'fill',\n          //   paint: {\n          //     \"fill-color\": \"#ccc\",\n          //     \"fill-opacity\": 0.3\n          //   }\n          // })\n          // let cursorPrecincts = new HoverWithRadius(\n          //   fillPrecincts,\n          //   20,\n          //   this.setMapSelection.bind(this)\n          // )\n        })\n      })\n    })})})\n  }\n\n  setMapSelection() {\n\n  }\n\n  switchLayer(layer_id) {\n  }\n\n  showBorder(layerName) {\n    this.layers[this.state.layer].forEach((lyr) => {\n      lyr.setOpacity(0)\n    })\n\n    let layerList = this.layers[layerName];\n    layerList.forEach((lyr) => {\n      lyr.setOpacity(1)\n    })\n    this.setState({ layer: layerName })\n  }\n\n  render() {\n    return <>\n      <div className=\"options\">\n        <label>\n          <input type=\"radio\" name=\"districts\" checked={this.state.layer === \"federal\"} value=\"fed\" onChange={(e) => { this.showBorder(\"federal\")}}/>\n          US Congress\n        </label>\n        <label>\n          <input type=\"radio\" name=\"districts\" checked={this.state.layer === \"senate\"} value=\"senate\" onChange={(e) => { this.showBorder(\"senate\")}}/>\n          State Senate\n        </label>\n        <label>\n          <input type=\"radio\" name=\"districts\" checked={this.state.layer === \"house\"} value=\"house\" onChange={(e) => { this.showBorder(\"house\")}}/>\n          State House\n        </label>\n      </div>\n      <div className=\"map-row\">\n        <div className=\"map-cell\">\n          <div className=\"map-square\" ref=\"map0\">\n          </div>\n        </div>\n        <div className=\"map-cell\">\n          <div className=\"map-square\" ref=\"map1\">\n          </div>\n        </div>\n        <div className=\"map-cell\">\n          <div className=\"map-square\" ref=\"map2\">\n          </div>\n        </div>\n      </div>\n      <div className=\"map-row\">\n        <div className=\"map-cell\">\n          <div className=\"map-square\" ref=\"map3\">\n          </div>\n        </div>\n        <div className=\"map-cell\">\n          <div className=\"map-square\" ref=\"map4\">\n          </div>\n        </div>\n        <div className=\"map-cell\">\n          <div className=\"map-square\" ref=\"map5\">\n          </div>\n        </div>\n      </div>\n      <div className=\"map-row\">\n        <div className=\"map-cell\">\n          <div className=\"map-square\" ref=\"map6\">\n          </div>\n        </div>\n        <div className=\"map-cell\">\n          <div className=\"map-square\" ref=\"map7\">\n          </div>\n        </div>\n        <div className=\"map-cell\">\n          <div className=\"map-square\" ref=\"map8\">\n          </div>\n        </div>\n      </div>\n    </>\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import Map from './pages/Map';\nimport Grid from './pages/Grid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section>\n        <Grid/>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}